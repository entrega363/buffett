const fs = require('fs');

// Ler o arquivo index.html
const indexPath = 'index.html';
const content = fs.readFileSync(indexPath, 'utf8');

console.log('=== AN√ÅLISE DETALHADA DAS FUN√á√ïES SUPABASE ===\n');

// Converter conte√∫do em linhas
const lines = content.split('\n');

// Encontrar a fun√ß√£o loadServicesFromSupabase
console.log('üîç ANALISANDO FUN√á√ÉO loadServicesFromSupabase...\n');

let funcStart = -1;
let funcEnd = -1;

// Encontrar in√≠cio da fun√ß√£o
for (let i = 0; i < lines.length; i++) {
    if (lines[i].includes('function loadServicesFromSupabase(')) {
        funcStart = i;
        break;
    }
}

// Encontrar fim da fun√ß√£o
if (funcStart !== -1) {
    let braceCount = 0;
    for (let i = funcStart; i < lines.length; i++) {
        const line = lines[i];
        if (line.includes('{')) braceCount++;
        if (line.includes('}')) braceCount--;
        if (braceCount === 0 && line.includes('}')) {
            funcEnd = i;
            break;
        }
    }
}

if (funcStart !== -1 && funcEnd !== -1) {
    console.log(`‚úÖ Fun√ß√£o encontrada nas linhas ${funcStart + 1} - ${funcEnd + 1}\n`);
    
    // Extrair e mostrar o corpo da fun√ß√£o
    const funcLines = lines.slice(funcStart, funcEnd + 1);
    funcLines.forEach((line, index) => {
        const lineNum = funcStart + index + 1;
        console.log(`${lineNum.toString().padStart(4)}: ${line}`);
    });
    
    console.log('\nüîç AN√ÅLISE DOS PROBLEMAS ENCONTRADOS:\n');
    
    // Verificar se h√° chamadas reais ao Supabase
    let hasRealSupabaseCall = false;
    funcLines.forEach((line, index) => {
        if (line.includes('await supabaseClient') && line.includes('.from(')) {
            hasRealSupabaseCall = true;
            console.log(`‚ùå LINHA ${funcStart + index + 1}: Chamada incompleta ou mal formada`);
            console.log(`   Conte√∫do: ${line.trim()}`);
        }
    });
    
    if (!hasRealSupabaseCall) {
        console.log('‚ùå NENHUMA CHAMADA REAL AO SUPABASE ENCONTRADA!');
        console.log('   A fun√ß√£o parece estar incompleta ou mal formatada.');
    }
    
    // Verificar se h√° erros de sintaxe
    const funcBody = funcLines.join('\n');
    if (funcBody.includes('await supabaseClient') && !funcBody.includes('.select(')) {
        console.log('‚ùå FALTA M√âTODO SELECT NA CHAMADA SUPABASE');
    }
    
    if (funcBody.includes('await supabaseClient') && !funcBody.includes(';')) {
        console.log('‚ùå FALTA PONTO E V√çRGULA NA CHAMADA SUPABASE');
    }
} else {
    console.log('‚ùå Fun√ß√£o loadServicesFromSupabase N√ÉO encontrada');
}

console.log('\n' + '='.repeat(50));
console.log('üîç ANALISANDO OUTRAS FUN√á√ïES DE CARGA...');
console.log('='.repeat(50) + '\n');

// Analisar outras fun√ß√µes de carga
const otherFunctions = [
    'loadReviewsFromSupabase',
    'loadSpacePhotosFromSupabase', 
    'loadContactInfoFromSupabase'
];

otherFunctions.forEach(funcName => {
    console.log(`üîç Fun√ß√£o: ${funcName}`);
    
    let start = -1;
    let end = -1;
    
    // Encontrar in√≠cio
    for (let i = 0; i < lines.length; i++) {
        if (lines[i].includes(`function ${funcName}(`)) {
            start = i;
            break;
        }
    }
    
    // Encontrar fim
    if (start !== -1) {
        let braceCount = 0;
        for (let i = start; i < lines.length; i++) {
            const line = lines[i];
            if (line.includes('{')) braceCount++;
            if (line.includes('}')) braceCount--;
            if (braceCount === 0 && line.includes('}')) {
                end = i;
                break;
            }
        }
    }
    
    if (start !== -1 && end !== -1) {
        const funcLines = lines.slice(start, end + 1);
        const funcBody = funcLines.join('\n');
        
        if (funcBody.includes('await supabaseClient') && !funcBody.includes('.select(')) {
            console.log(`‚ùå ${funcName}: Falta m√©todo .select()`);
        } else if (funcBody.includes('await supabaseClient')) {
            console.log(`‚úÖ ${funcName}: Chamada aparentemente correta`);
        } else {
            console.log(`‚ùå ${funcName}: Sem chamada ao Supabase`);
        }
    } else {
        console.log(`‚ùå ${funcName}: Fun√ß√£o n√£o encontrada`);
    }
    
    console.log('');
});

console.log('üí° SOLU√á√ÉO SUGERIDA:');
console.log('As fun√ß√µes de carga do Supabase est√£o mal formatadas.');
console.log('√â necess√°rio corrigir as chamadas para seguir o padr√£o:');
console.log('await supabaseClient.from(\'tabela\').select(\'*\')');