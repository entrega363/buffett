const fs = require('fs');

// Ler o arquivo index.html
const indexPath = 'index.html';
const content = fs.readFileSync(indexPath, 'utf8');

console.log('=== AN√ÅLISE DAS FUN√á√ïES SUPABASE NO SITE ===\n');

// Converter conte√∫do em linhas
const lines = content.split('\n');

// Encontrar as fun√ß√µes que acessam o Supabase
console.log('üîç PROCURANDO FUN√á√ïES DE ACESSO AO SUPABASE...\n');

// Procurar por fun√ß√µes que come√ßam com "load" e terminam com "FromSupabase"
const loadFunctions = [];
for (let i = 0; i < lines.length; i++) {
    const line = lines[i];
    if (line.includes('function load') && line.includes('FromSupabase')) {
        const funcMatch = line.match(/function\s+(load\w+FromSupabase)/);
        if (funcMatch) {
            loadFunctions.push({
                name: funcMatch[1],
                line: i + 1
            });
        }
    }
}

console.log(`‚úÖ ${loadFunctions.length} fun√ß√µes de carga encontradas:`);
loadFunctions.forEach(func => {
    console.log(`   - ${func.name} (linha ${func.line})`);
});
console.log('');

// Analisar cada fun√ß√£o de carga
loadFunctions.forEach(func => {
    console.log(`üîç ANALISANDO FUN√á√ÉO: ${func.name}`);
    
    // Encontrar o in√≠cio e fim da fun√ß√£o
    let funcStart = func.line - 1;
    let funcEnd = funcStart;
    let braceCount = 0;
    
    // Encontrar o in√≠cio da fun√ß√£o
    for (let i = funcStart; i >= 0; i--) {
        if (lines[i].includes('function ' + func.name)) {
            funcStart = i;
            break;
        }
    }
    
    // Encontrar o fim da fun√ß√£o
    for (let i = funcStart; i < lines.length; i++) {
        const line = lines[i];
        if (line.includes('{')) braceCount++;
        if (line.includes('}')) braceCount--;
        if (braceCount === 0 && line.includes('}')) {
            funcEnd = i;
            break;
        }
    }
    
    console.log(`   Linhas: ${funcStart + 1} - ${funcEnd + 1}`);
    
    // Extrair o corpo da fun√ß√£o
    const funcLines = lines.slice(funcStart, funcEnd + 1);
    const funcBody = funcLines.join('\n');
    
    // Verificar chamadas Supabase
    const supabaseCalls = funcBody.match(/await supabaseClient\.[\s\S]*?;/g);
    if (supabaseCalls) {
        console.log(`   ‚úÖ ${supabaseCalls.length} chamadas Supabase encontradas:`);
        supabaseCalls.forEach((call, index) => {
            console.log(`     ${index + 1}. ${call.trim()}`);
        });
    } else {
        console.log(`   ‚ùå Nenhuma chamada Supabase encontrada`);
    }
    
    // Verificar tabela acessada
    const tableMatch = funcBody.match(/\.from\(['"]([^'"]+)['"]\)/);
    if (tableMatch) {
        console.log(`   üìä Tabela acessada: ${tableMatch[1]}`);
    }
    
    // Verificar tratamento de erro
    if (funcBody.includes('if (error)')) {
        console.log(`   ‚úÖ Tratamento de erro implementado`);
    } else {
        console.log(`   ‚ö†Ô∏è  Tratamento de erro n√£o encontrado`);
    }
    
    console.log('');
});

// Verificar fun√ß√µes principais de inicializa√ß√£o
console.log('üîç VERIFICANDO FUN√á√ïES DE INICIALIZA√á√ÉO...\n');

const initFunctions = [
    'loadServicesFromSupabase',
    'loadReviewsFromSupabase',
    'loadSpacePhotosFromSupabase',
    'loadContactInfoFromSupabase'
];

initFunctions.forEach(funcName => {
    const funcExists = content.includes('function ' + funcName);
    if (funcExists) {
        console.log(`‚úÖ ${funcName} - Fun√ß√£o encontrada`);
    } else {
        console.log(`‚ùå ${funcName} - Fun√ß√£o N√ÉO encontrada`);
    }
});

// Verificar chamadas √†s fun√ß√µes de inicializa√ß√£o
console.log('\nüîç VERIFICANDO CHAMADAS √ÄS FUN√á√ïES DE INICIALIZA√á√ÉO...\n');

const domContentLoaded = content.match(/document\.addEventListener\('DOMContentLoaded',[\s\S]*?await load\w+FromSupabase/g);
if (domContentLoaded) {
    console.log(`‚úÖ ${domContentLoaded.length} chamadas de inicializa√ß√£o encontradas`);
} else {
    console.log(`‚ùå Nenhuma chamada de inicializa√ß√£o encontrada`);
}

console.log('\n=== AN√ÅLISE CONCLU√çDA ===\n');

// Verificar se h√° erros de sintaxe
console.log('üîç VERIFICANDO POSS√çVEIS ERROS DE SINTAXE...\n');

// Verificar chaves balanceadas
let totalBraces = 0;
lines.forEach(line => {
    totalBraces += (line.match(/{/g) || []).length;
    totalBraces -= (line.match(/}/g) || []).length;
});

if (totalBraces === 0) {
    console.log('‚úÖ Chaves balanceadas');
} else {
    console.log(`‚ùå Chaves DESBALANCEADAS: ${totalBraces > 0 ? 'faltam' : 'sobram'} ${Math.abs(totalBraces)}`);
}

// Verificar par√™nteses balanceados
let totalParentheses = 0;
lines.forEach(line => {
    totalParentheses += (line.match(/\(/g) || []).length;
    totalParentheses -= (line.match(/\)/g) || []).length;
});

if (totalParentheses === 0) {
    console.log('‚úÖ Par√™nteses balanceados');
} else {
    console.log(`‚ùå Par√™nteses DESBALANCEADOS: ${totalParentheses > 0 ? 'faltam' : 'sobram'} ${Math.abs(totalParentheses)}`);
}

console.log('\nüí° SUGEST√ïES BASEADAS NA AN√ÅLISE:');
console.log('1. Verificar se todas as fun√ß√µes de carga est√£o implementadas corretamente');
console.log('2. Confirmar se as chamadas Supabase est√£o usando a sintaxe correta');
console.log('3. Verificar se h√° erros de sintaxe que impedem a execu√ß√£o');
console.log('4. Confirmar se as fun√ß√µes de inicializa√ß√£o est√£o sendo chamadas');